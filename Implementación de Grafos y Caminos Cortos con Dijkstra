class Grafo:
  def __init__(self):
      self.matriz_adjacencia = []
      self.nodos = []

  def agregar_nodo(self, nodo):
      if nodo not in self.nodos:
          self.nodos.append(nodo)
          for fila in self.matriz_adjacencia:
              fila.append(float('inf'))  # Inicializar nuevas conexiones como infinitas
          self.matriz_adjacencia.append([float('inf')] * len(self.nodos))
          self.matriz_adjacencia[-1][-1] = 0  # Distancia a sí mismo es 0

  def agregar_arista(self, origen, destino, peso):
      if origen in self.nodos and destino in self.nodos:
          indice_origen = self.nodos.index(origen)
          indice_destino = self.nodos.index(destino)
          self.matriz_adjacencia[indice_origen][indice_destino] = peso

  def mostrar_matriz(self):
      print("Matriz de adyacencia:")
      print("   " + " ".join(self.nodos))
      for i, fila in enumerate(self.matriz_adjacencia):
          print(f"{self.nodos[i]}: " + " ".join(str(peso) if peso != float('inf') else "∞" for peso in fila))

  def dijkstra(self, inicio):
      if inicio not in self.nodos:
          raise ValueError("El nodo de inicio no está en el grafo.")

      indice_inicio = self.nodos.index(inicio)
      distancias = {nodo: float('inf') for nodo in self.nodos}
      distancias[inicio] = 0
      visitados = set()
      predecesores = {nodo: None for nodo in self.nodos}

      while len(visitados) < len(self.nodos):
          # Seleccionar el nodo no visitado con la distancia más corta
          nodo_actual = min((nodo for nodo in self.nodos if nodo not in visitados), key=lambda nodo: distancias[nodo])
          visitados.add(nodo_actual)

          # Actualizar distancias a los nodos adyacentes
          indice_actual = self.nodos.index(nodo_actual)
          for indice_destino, peso in enumerate(self.matriz_adjacencia[indice_actual]):
              if peso != float('inf') and self.nodos[indice_destino] not in visitados:
                  nueva_distancia = distancias[nodo_actual] + peso
                  if nueva_distancia < distancias[self.nodos[indice_destino]]:
                      distancias[self.nodos[indice_destino]] = nueva_distancia
                      predecesores[self.nodos[indice_destino]] = nodo_actual

      return distancias, predecesores

  def obtener_camino(self, inicio, fin):
      distancias, predecesores = self.dijkstra(inicio)
      camino = []
      nodo_actual = fin

      while nodo_actual is not None:
          camino.append(nodo_actual)
          nodo_actual = predecesores[nodo_actual]
      camino.reverse()

      return camino, distancias[fin]


# Ejemplo de uso
grafo = Grafo()
grafo.agregar_nodo('A')
grafo.agregar_nodo('B')
grafo.agregar_nodo('C')
grafo.agregar_nodo('D')
grafo.agregar_arista('A', 'B', 1)
grafo.agregar_arista('B', 'C', 2)
grafo.agregar_arista('A', 'C', 4)
grafo.agregar_arista('A', 'D', 10)
grafo.agregar_arista('B', 'D', 2)

grafo.mostrar_matriz()

inicio = 'A'
fin = 'D'
camino, coste = grafo.obtener_camino(inicio, fin)
print(f"El camino más corto desde {inicio} hasta {fin} es: {' -> '.join(camino)} con un coste de {coste}.")
